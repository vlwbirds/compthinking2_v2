---
title: "compthinking2"
format: html
editor: visual
---

## So, you're suddenly a shorebird biologist!

```{r}
library(tidyverse)

# Generate sample data
# Sightings of Black Oystercatcher chicks at Santa Cruz beaches
beaches <- c("Cowell's", "Steamer Lane", "Natural Bridges", "Mitchell's", "Main")
# blue, green, black, white, yellow
band_colors <- c("B", "G", "K", "W", "Y") 
# Surveys took place weekly in the summer of 2023
surveys <- seq(as.Date("2023-06-01"), as.Date("2023-08-31"), by = 7)

# Setting the "seed" forces randomized functions (like sample()) to generate
# the same output
set.seed(1538)
# 3 band colors identify a bird. We want 12 birds.
birds <- paste0(
  sample(band_colors, 25, replace = TRUE),
  sample(band_colors, 25, replace = TRUE),
  sample(band_colors, 25, replace = TRUE)
) %>% 
  unique() %>%
  head(12)
bloy_chicks <- tibble(
  # Randomly generate survey data
  beach = sample(beaches, size = 100, replace = TRUE),
  bird = sample(birds, size = 100, replace = TRUE),
  survey = sample(surveys, size = 100, replace = TRUE)
) %>% 
  # Remove duplicates (see ?distinct)
  distinct() %>% 
  # Sort by survey date and location
  arrange(survey, beach)
```

**Q1** We're randomly generating data, but we're all going to end up with the same data frames. How is that happening?

This is because when set.seed() is used, it initializes the RNG at the same point every time, and additionally it will follow the same sequence from the RNG to generate the numbers in the same order every time.

**Q2** Explain in plain language what this part does. Your answer should be one or two sentences.

This code combines three randomized band color samples, and runs the process 25 times for each sample. Then it finds only unique combinations and selects the first 12 of them from the sample.

**Q3** We generated 100 random survey observations. How many rows are in `bloy_chicks`? Why the difference?

There are 95 rows in the bloy_chicks dataframe. It is likely that the sample RNG created duplicate rows, which were removed by distinct()

**Q4** Sort the pipelines back into correct order.

```{r}
# Find most frequent beach per bird
beach_freq <- bloy_chicks %>% 
  group_by(bird) %>% 
  count(bird, beach) %>% 
  filter(n == max(n)) %>% 
  ungroup()
  
# Find first date for each bird+beach
beach_early <- bloy_chicks %>% 
  group_by(bird, beach) %>% 
  summarize(earliest = min(survey),
            .groups = "drop")
# Join the two conditions and retain most frequent beach, only earliest
hatch_beach <- beach_freq %>% 
  left_join(beach_early, by = c("bird", "beach")) %>% 
  group_by(bird) %>% 
  filter(earliest == min(earliest)) %>% 
  sample_n(1) %>% # Randomly choose 1 row. See ?sample_n
  ungroup()

view(hatch_beach)
```

Here's a different approach using a custom function.

1.  Put the logic for estimating the hatching beach in a single function.

2.  Group the data by bird

3.  Summarize each group using your custom function

```{r}

find_hatching_beach <- function(site, date) { 
  bird_observations <- tibble(site, date) 
  result <- bird_observations %>% 
    group_by(site) %>% # group by site
    summarize(n = n(), # count the number of observations
              earliest = min(date)) %>% # find the earliest date
    filter(n == max(n), # find the site with the most observations
           earliest == min(date)) %>% # find the earliest date based on most observations
    select(site, n, earliest) # takes the site and matches it with most observations and earliest date
return(result$site) # returns the site with the most observations and the earliest date
  }

# split-apply-combine
bloy_chicks %>% 
  group_by(bird) %>% 
  summarize(beach = find_hatching_beach(beach, survey))

# Where was YWG?
bloy_chicks %>% 
  group_by(bird) %>% 
  filter(bird == "YWG") %>% 
  summarize(beach = find_hatching_beach(beach, survey))

# Where was WYB?
bloy_chicks %>% 
  group_by(bird) %>% 
  filter(bird == "WYB") %>% 
  summarize(beach = find_hatching_beach(beach, survey))


```

**Q5** The two *parameters* of `find_hatching_beach()` are named `site` and `date`. When this function is called, what columns in `bloy_chicks` will you use as *arguments* for these parameters?

The parameters *site* and *date* are equivalent to *beach* and *survey* in the original data.

**Q6** What will be the value of `site` when `find_hatching_beach()` is called on the group for bird YWG? How about WYB?

YWG was observed most often at Mitchell's.

WYB frequented Mitchell's as well.
